networks:
  triton-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET}

services:
  triton-model-builder:
    build:
      args:
        - TRITON_VERSION=${MAJOR_UPDATE_VERSION}
        - PROTOBUF_URL=${PROTOBUF_URL}
      context: docker/triton-server
    image: triton-server-image
    shm_size: 32g
    ulimits:
      memlock: -1
      stack: 67108864
    runtime: nvidia
    env_file:
      - .env
    entrypoint: ["bash", "/tmp/entrypoint.sh"]
    volumes:
      - type: bind
        source: docker/triton-server/facenet_model
        target: /tmp/facenet_model
      - type: bind
        source: docker/triton-server/fpenet_model
        target: /tmp/fpenet_model
      - type: bind
        source: docker/triton-server/tlt-converter.sh
        target: /tmp/entrypoint.sh
      - type: bind
        source: triton-models
        target: /models

  triton-server:
    image: triton-server-image
    shm_size: 32g
    ulimits:
      memlock: -1
      stack: 67108864
    runtime: nvidia
    env_file:
      - .env
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
    entrypoint:
      [
        "tritonserver",
        "--model-repository=/models",
        "--allow-metrics=true",
        "--allow-gpu-metrics=true",
        "--log-verbose=0",
        "--repository-poll-secs=3",
      ]
    hostname: triton-server
    networks:
      triton-network:
        ipv4_address: ${TRITON_SERVER_IP}
    volumes:
      - type: bind
        source: triton-models
        target: /models

  triton-client:
    build:
      args:
        - TRITON_VERSION=${MAJOR_UPDATE_VERSION}
        - PROTOBUF_URL=${PROTOBUF_URL}
      context: docker/triton-client
    image: triton-client
    shm_size: 32g
    ulimits:
      memlock: -1
      stack: 67108864
    env_file:
      - .env
    ports:
      - 8888:8888
    entrypoint:
      [
        "jupyter",
        "lab",
        "--ServerApp.ip=0.0.0.0",
        "--ServerApp.port=8888",
        "--ServerApp.allow_root=True",
        "--ServerApp.token=''",
        "--ServerApp.password=''",
        "--Application.log_level='CRITICAL'",
      ]
    working_dir: /workspace
    hostname: triton-client
    networks:
      triton-network:
        ipv4_address: ${TRITON_CLIENT_IP}
    volumes:
      - type: bind
        source: workspace
        target: /workspace
      - type: bind
        source: ${HOST_IMAGE_FOLDER}
        target: ${CONTAINER_IMAGE_FOLDER}
      - type: bind
        source: triton-models
        target: /models

  redis-db:
    image: ${REDIS_DB_IMAGE}
    env_file:
      - .env
    ports:
      - 6379:6379
    hostname: redis-db
    networks:
      triton-network:
        ipv4_address: ${REDIS_DB_IP}
    volumes:
      - type: bind
        source: docker/redis-db
        target: /data
      - type: bind
        source: docker/redis-db/redis.conf
        target: /usr/local/etc/redis/redis.conf
    entrypoint: ["redis-server", "/usr/local/etc/redis/redis.conf"]
